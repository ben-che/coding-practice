/* Global Styles */

.section-container {
    height:100vh;
    width:100vw;
}

/* Section 1 - Basic CSS Animations */

/* Basics include "animation" and "keyframes" - all css animations revolve around these two properties:
        the animation property defines the different behaviours of the animation itself, while
        keyframes allows the user to pinpoint how fast or slow different parts of the animation will execute */

/* The animation CSS property is a shorthand property for the various animation properties: 
animation-name: the name of the animation that you want to apply to the html object 
animation-duration: the total time it takes for the animation to start and finish
animation-timing-function: how the animation progresses during the duration - can be defined with built in keywords such as
    "linear, ease-in, ease-out", with cubic-bezier functions, steps, or the most popular - keyframes
animation-delay: wait x amount of time before the animation begins - this delay begins only when the element is first loaded
animation-iteration-count: how many times the animation should play before it stops - infinite can be specified to keep the
    animation going
animation-direction: specifies which way an animation should be played - values include normal, reverse, alternate or alternate-reverse
animation-fill-mode: specifies how CSS animation properties should be applied to its target before and after its execution
and animation-play-state: allows the user to pause an animation at a specific time (through the use of keyframes) - 
    it only have two major values - running and paused
     
The entirety of this can be condensed onto one line:
animation: duration | timing-function | delay | iteration-count | direction | fill-mode | play-state | name  */

/* Section 1 animation CSS examples: */


/* Section 1 Example 1 */

.section-one---container___loading-bar {
    background-color: #333;
    height:30px;
    width:100%;
    transform-origin: left center;
    animation: 3s ease-in 1s 1 normal both running loading;
}

/* scaleX scales the element on the horizontal axis by a factor of the argument the user gives it */
@keyframes loading {
    from { transform: scaleX(0); }
    to   { transform: scaleX(1); }
  }

/* Section 1 Example 2  */
/* We can change up the keyframes to specify the behaviour of the loading bar */

/* This class is identical to the one above, except the animation keyframes are different values
    Question: When will this animation finish? Before, after or at the same time the first animation finishes? */
.section-one---container___loading-bar-2 {
    background-color: #333;
    height:30px;
    width:100%;
    transform-origin: left center;
    animation: 10s ease-in 1s 1 normal both running loading-2;
}

@keyframes loading-2 {
    /* at 0 seconds, width is 0% */
    0% {
        width:0%;
    }
    /* at 5 seconds, width is 25% */
    50% {
        width:25%;
    }
    /* at 7.5 seconds, width is 75% */
     75% {
         width: 30%;
     }
     /* at 10 seconds, width is 100% */
     100% {
         width: 100%
     }
}


/* Section 1 Example 3 - Clouds */

/* Using what we learned above, we can create simple animations - below is code to animate clouds in a sky */

/* Cloud CSS */
.cloud {
    /* Drawing the cloud: */
    background: #fff;
    -webkit-border-radius: 100px;
    -moz-border-radius: 100px;
    border-radius: 100px;

    -webkit-box-shadow: 0 8px 5px rgba(0, 0, 0, 0.1);
    -moz-box-shadow: 0 8px 5px rgba(0, 0, 0, 0.1);
    box-shadow: 0 8px 5px rgba(0, 0, 0, 0.1);

    height: 130px;
    position: relative;
    width: 350px;

    z-index: 1;

}

.cloud:after, .cloud:before {
    /* The before and after pseduoclasses are often used to add additional styling to HTML elements - try:

    p:before {content: 'before pseudoclass text'};
    p:after {content: 'after pseudoclass text'};
    
    to better understand how pseudoclasses work */

    /* Ensures the that the before and after pseudoclasses stay behind our main cloud object */

    background: #fff;
	content: '';
	position: absolute;
	z-index: -1;
}

.cloud:before {
    /* Big puffy */
    -webkit-border-radius: 200px;
	-moz-border-radius: 200px;
	border-radius: 200px;

	width: 180px;
	height: 190px;
	right: 50px;
	top: -90px;
}

.cloud:after {
    /* Smol puffy */
	-webkit-border-radius: 100px;
	-moz-border-radius: 100px;
	border-radius: 100px;

	height: 180px;
	left: 50px;
	top: -50px;
	width: 100px;
}

/* Make different clouds - we can change the opacity, size and speed of certain clouds to make them seem further or closer */
.c1 {
    transform:scale(0.5);
    margin-top:20px;
}

/* background cloud */
.c2 {
    transform:scale(0.15);
    opacity:0.2;
}

.c3 {
    transform:scale(0.6);
    margin-top:5px;
}

/* background clouds */
.c4 {
    transform:scale(0.10);
    opacity:0.3;
}
.c5 {
    transform:scale(0.20);
    opacity:0.3;
}


/* Cloud Animations */
.cloud-animation-1 {
    -webkit-animation: cloud-slide-reverse 20s linear infinite;
	-moz-animation: cloud-slide-reverse 20s linear infinite ;
    animation: cloud-slide-reverse 20s linear infinite;
}

.cloud-animation-2 {
    -webkit-animation: cloud-slide 60s linear infinite;
	-moz-animation: cloud-slide 60s linear infinite ;
    animation: cloud-slide 60s linear infinite;
}

.cloud-animation-3 {
    -webkit-animation: cloud-slide-reverse 27s linear infinite;
	-moz-animation: cloud-slide-reverse 27s linear infinite ;
    animation: cloud-slide-reverse 27s linear infinite;
}

.cloud-animation-4 {
    -webkit-animation: cloud-slide 46s linear infinite;
	-moz-animation: cloud-slide 46s linear infinite ;
    animation: cloud-slide 46s linear infinite;
}
.cloud-animation-5 {
    -webkit-animation: cloud-slide-reverse 40s linear infinite;
	-moz-animation: cloud-slide-reverse 40s linear infinite ;
    animation: cloud-slide-reverse 40s linear infinite;
}

/* Defining the keyframes for clouds */
@keyframes cloud-slide {
    0% {
        /* Hide the cloud - this means the cloud will behind -100% of the screen at the beginning of the animation */
      margin-left: -10%;
    }
    100% {
        /* Center the cloud - at the end of the animation, the cloud will end up in the middle, as defined in the class */
     margin-left: 100%;
    }
}

@keyframes cloud-slide-reverse {
    0% {
        /* Hide the cloud - this means the cloud will behind -100% of the screen at the beginning of the animation */
      margin-left: 90%;
    }
    100% {
        /* Center the cloud - at the end of the animation, the cloud will end up in the middle, as defined in the class */
     margin-left: -10%;
    }
}